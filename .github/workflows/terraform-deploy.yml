name: Terraform Deploy
on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 # Faz o checkout do seu código

    - uses: hashicorp/setup-terraform@v1 # Configura o Terraform no runner do Actions

    - name: Terraform Init # Inicializa o backend do Terraform
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Destroy (TEMPORÁRIO - Remova após o primeiro deploy de sucesso)
      # Este passo é crucial para limpar quaisquer recursos parcialmente criados
      # de execuções anteriores que falharam, resolvendo os erros "already exists".
      # ATENÇÃO: EM AMBIENTES DE PRODUÇÃO, NÃO USE -auto-approve COM DESTROY SEM CUIDADO EXTREMO!
      working-directory: ./terraform
      run: terraform destroy -auto-approve -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      # Opcional: Adicione 'if: always()' se quiser que o destroy tente rodar mesmo se o init falhar.
      # if: always()

    - name: Terraform Apply # Aplica as configurações do Terraform
      working-directory: ./terraform
      run: terraform apply -auto-approve -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var="docker_image=rafafrassetto/strapi-cms:latest"
      env:
        TF_VAR_docker_image: rafafrassetto/strapi-cms:latest
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}